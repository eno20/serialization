/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uangel.marshal.avro.service2;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Parameter extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3221682166562208057L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Parameter\",\"namespace\":\"com.uangel.marshal.avro.service2\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"imageName\",\"type\":\"string\"},{\"name\":\"imageMap\",\"type\":\"bytes\"},{\"name\":\"imageType\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Parameter> ENCODER =
      new BinaryMessageEncoder<Parameter>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Parameter> DECODER =
      new BinaryMessageDecoder<Parameter>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Parameter> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Parameter> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Parameter>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Parameter to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Parameter from a ByteBuffer. */
  public static Parameter fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence imageName;
  @Deprecated public java.nio.ByteBuffer imageMap;
  @Deprecated public java.lang.CharSequence imageType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Parameter() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param imageName The new value for imageName
   * @param imageMap The new value for imageMap
   * @param imageType The new value for imageType
   */
  public Parameter(java.lang.Integer id, java.lang.CharSequence imageName, java.nio.ByteBuffer imageMap, java.lang.CharSequence imageType) {
    this.id = id;
    this.imageName = imageName;
    this.imageMap = imageMap;
    this.imageType = imageType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return imageName;
    case 2: return imageMap;
    case 3: return imageType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: imageName = (java.lang.CharSequence)value$; break;
    case 2: imageMap = (java.nio.ByteBuffer)value$; break;
    case 3: imageType = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'imageName' field.
   * @return The value of the 'imageName' field.
   */
  public java.lang.CharSequence getImageName() {
    return imageName;
  }

  /**
   * Sets the value of the 'imageName' field.
   * @param value the value to set.
   */
  public void setImageName(java.lang.CharSequence value) {
    this.imageName = value;
  }

  /**
   * Gets the value of the 'imageMap' field.
   * @return The value of the 'imageMap' field.
   */
  public java.nio.ByteBuffer getImageMap() {
    return imageMap;
  }

  /**
   * Sets the value of the 'imageMap' field.
   * @param value the value to set.
   */
  public void setImageMap(java.nio.ByteBuffer value) {
    this.imageMap = value;
  }

  /**
   * Gets the value of the 'imageType' field.
   * @return The value of the 'imageType' field.
   */
  public java.lang.CharSequence getImageType() {
    return imageType;
  }

  /**
   * Sets the value of the 'imageType' field.
   * @param value the value to set.
   */
  public void setImageType(java.lang.CharSequence value) {
    this.imageType = value;
  }

  /**
   * Creates a new Parameter RecordBuilder.
   * @return A new Parameter RecordBuilder
   */
  public static com.uangel.marshal.avro.service2.Parameter.Builder newBuilder() {
    return new com.uangel.marshal.avro.service2.Parameter.Builder();
  }

  /**
   * Creates a new Parameter RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Parameter RecordBuilder
   */
  public static com.uangel.marshal.avro.service2.Parameter.Builder newBuilder(com.uangel.marshal.avro.service2.Parameter.Builder other) {
    return new com.uangel.marshal.avro.service2.Parameter.Builder(other);
  }

  /**
   * Creates a new Parameter RecordBuilder by copying an existing Parameter instance.
   * @param other The existing instance to copy.
   * @return A new Parameter RecordBuilder
   */
  public static com.uangel.marshal.avro.service2.Parameter.Builder newBuilder(com.uangel.marshal.avro.service2.Parameter other) {
    return new com.uangel.marshal.avro.service2.Parameter.Builder(other);
  }

  /**
   * RecordBuilder for Parameter instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Parameter>
    implements org.apache.avro.data.RecordBuilder<Parameter> {

    private int id;
    private java.lang.CharSequence imageName;
    private java.nio.ByteBuffer imageMap;
    private java.lang.CharSequence imageType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uangel.marshal.avro.service2.Parameter.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.imageName)) {
        this.imageName = data().deepCopy(fields()[1].schema(), other.imageName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.imageMap)) {
        this.imageMap = data().deepCopy(fields()[2].schema(), other.imageMap);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.imageType)) {
        this.imageType = data().deepCopy(fields()[3].schema(), other.imageType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Parameter instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uangel.marshal.avro.service2.Parameter other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.imageName)) {
        this.imageName = data().deepCopy(fields()[1].schema(), other.imageName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.imageMap)) {
        this.imageMap = data().deepCopy(fields()[2].schema(), other.imageMap);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.imageType)) {
        this.imageType = data().deepCopy(fields()[3].schema(), other.imageType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.uangel.marshal.avro.service2.Parameter.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.uangel.marshal.avro.service2.Parameter.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'imageName' field.
      * @return The value.
      */
    public java.lang.CharSequence getImageName() {
      return imageName;
    }

    /**
      * Sets the value of the 'imageName' field.
      * @param value The value of 'imageName'.
      * @return This builder.
      */
    public com.uangel.marshal.avro.service2.Parameter.Builder setImageName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.imageName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'imageName' field has been set.
      * @return True if the 'imageName' field has been set, false otherwise.
      */
    public boolean hasImageName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'imageName' field.
      * @return This builder.
      */
    public com.uangel.marshal.avro.service2.Parameter.Builder clearImageName() {
      imageName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'imageMap' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getImageMap() {
      return imageMap;
    }

    /**
      * Sets the value of the 'imageMap' field.
      * @param value The value of 'imageMap'.
      * @return This builder.
      */
    public com.uangel.marshal.avro.service2.Parameter.Builder setImageMap(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.imageMap = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'imageMap' field has been set.
      * @return True if the 'imageMap' field has been set, false otherwise.
      */
    public boolean hasImageMap() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'imageMap' field.
      * @return This builder.
      */
    public com.uangel.marshal.avro.service2.Parameter.Builder clearImageMap() {
      imageMap = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'imageType' field.
      * @return The value.
      */
    public java.lang.CharSequence getImageType() {
      return imageType;
    }

    /**
      * Sets the value of the 'imageType' field.
      * @param value The value of 'imageType'.
      * @return This builder.
      */
    public com.uangel.marshal.avro.service2.Parameter.Builder setImageType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.imageType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'imageType' field has been set.
      * @return True if the 'imageType' field has been set, false otherwise.
      */
    public boolean hasImageType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'imageType' field.
      * @return This builder.
      */
    public com.uangel.marshal.avro.service2.Parameter.Builder clearImageType() {
      imageType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Parameter build() {
      try {
        Parameter record = new Parameter();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.imageName = fieldSetFlags()[1] ? this.imageName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.imageMap = fieldSetFlags()[2] ? this.imageMap : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        record.imageType = fieldSetFlags()[3] ? this.imageType : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Parameter>
    WRITER$ = (org.apache.avro.io.DatumWriter<Parameter>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Parameter>
    READER$ = (org.apache.avro.io.DatumReader<Parameter>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
